% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parameters.R
\name{spim_fit_pars_load}
\alias{spim_fit_pars_load}
\title{Load parameters}
\usage{
spim_fit_pars_load(path, region, assumptions, kernel_scaling)
}
\arguments{
\item{path}{The path to load from.  This will be a directory
containing files "info.csv", "prior.csv" and "proposal.csv" (for
\link{spim_pars_pmcmc_load}) but also the baseline
parameters ("base.rds") and a transformation function
("transform.R")}

\item{region}{A single region, or vector of regions, to load.}

\item{assumptions}{The name of any assumptions to apply to filter
the baseline parmeters (e.g., "central")}

\item{kernel_scaling}{The scaling coefficient for loading the
proposal variance-covariance matrix.}
}
\value{
A list.
}
\description{
Load parameters for fitting.
}
\details{
There are lots of types of parameters here, depending on the
perspective
\itemize{
\item This function deals with loading in the "logical" parameters;
things like "vaccine efficacy" or "vaccination doses".  These
can be any R object.
\item Our aim is to create \code{sircovid} parameters, the result of
\code{sircovid::lancelot_parameters}.  This will be a list with
structured parmeters that correspond directly to dust/odin
inputs.  Most likely these will be
\link[mcstate:multistage_parameters]{mcstate::multistage_parameters} objects that cover multiple
epochs with different model parameters, and these might be
grouped together in a list so that a multiparameter (nested)
filter can be run.
\item We'll end up working with small(ish) numeric vectors of
parameters from the pmcmc process.  Our transform function will
convert this vector of parameters, using the logical parameters,
into baseline parameters.
\item The mcmc parameters object that this function will return (as
\verb{$mcmc}) is a \link[mcstate:pmcmc_parameters]{mcstate::pmcmc_parameters} or
\link[mcstate:pmcmc_parameters_nested]{mcstate::pmcmc_parameters_nested} object, which contains all
the information for the above.
}
}
